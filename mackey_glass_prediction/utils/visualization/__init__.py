"""
Pacote de visualiza√ß√£o modular para an√°lise de modelos de machine learning

Este pacote cont√©m m√≥dulos especializados para diferentes tipos de visualiza√ß√µes:
- utils: Fun√ß√µes utilit√°rias e formata√ß√£o
- basic_plots: Gr√°ficos b√°sicos (treinamento, predi√ß√µes)
- distribution_analysis: An√°lises de distribui√ß√£o (QQ-plot, FDA, FDP)
- statistical_tests: Testes estat√≠sticos (KS, autocorrela√ß√£o)
- comparison_plots: Compara√ß√µes entre modelos
- reports: Gera√ß√£o de relat√≥rios abrangentes
"""

# Configurar matplotlib para n√£o exibir gr√°ficos na tela
import matplotlib
matplotlib.use('Agg')  # Backend n√£o-interativo que apenas salva arquivos
import matplotlib.pyplot as plt

# Configura√ß√µes adicionais para melhor qualidade e desempenho
plt.ioff()  # Desabilitar modo interativo

# Imports principais de cada m√≥dulo
from .utils import (
    format_metric_value,
    validate_and_clean_metrics,
    ensure_output_dir,
    get_colors_and_styles,
    add_metrics_text_box,
    print_save_message
)

from .basic_plots import (
    plot_training_history,
    plot_predictions,
    plot_metrics_comparison,
    save_metrics_table
)

from .distribution_analysis import (
    plot_qq_analysis,
    plot_cdf_comparison,
    plot_pdf_comparison,
    plot_distribution_analysis,
    plot_multi_model_cdf_comparison,
    plot_multi_model_pdf_comparison
)

from .statistical_tests import (
    plot_ks_test_analysis,
    plot_autocorrelation_analysis
)

from .comparison_plots import (
    plot_models_comparison_overview,
    plot_predictions_comparison,
    plot_residuals_comparison,
    plot_training_comparison,
    plot_performance_radar
)

from .reports import (
    generate_comprehensive_report,
    generate_text_report,
    generate_html_report,
    generate_quick_summary
)

# Vers√£o do pacote
__version__ = "1.0.0"

# Fun√ß√µes principais (atalhos)
__all__ = [
    # Utils
    'format_metric_value',
    'validate_and_clean_metrics',
    'ensure_output_dir',
    'get_colors_and_styles',
    'add_metrics_text_box',
    'print_save_message',
    
    # Basic plots
    'plot_training_history',
    'plot_predictions',
    'plot_metrics_comparison',
    'save_metrics_table',
    
    # Distribution analysis
    'plot_qq_analysis',
    'plot_cdf_comparison',
    'plot_pdf_comparison',
    'plot_distribution_analysis',
    'plot_multi_model_cdf_comparison',
    'plot_multi_model_pdf_comparison',
    
    # Statistical tests
    'plot_ks_test_analysis',
    'plot_autocorrelation_analysis',
    
    # Comparison plots
    'plot_models_comparison_overview',
    'plot_predictions_comparison',
    'plot_residuals_comparison',
    'plot_training_comparison',
    'plot_performance_radar',
    
    # Reports
    'generate_comprehensive_report',
    'generate_text_report',
    'generate_html_report',
    'generate_quick_summary'
]


def show_available_functions():
    """
    Mostra todas as fun√ß√µes dispon√≠veis no pacote de visualiza√ß√£o
    """
    print("üìä PACOTE DE VISUALIZA√á√ÉO - FUN√á√ïES DISPON√çVEIS")
    print("=" * 60)
    
    print("\nüõ†Ô∏è  UTILIT√ÅRIOS:")
    print("   ‚Ä¢ format_metric_value() - Formatar valores de m√©tricas")
    print("   ‚Ä¢ validate_and_clean_metrics() - Validar dados de entrada")
    print("   ‚Ä¢ ensure_output_dir() - Garantir diret√≥rio de sa√≠da")
    print("   ‚Ä¢ get_colors_and_styles() - Obter cores e estilos")
    print("   ‚Ä¢ add_metrics_text_box() - Adicionar caixa de m√©tricas")
    print("   ‚Ä¢ print_save_message() - Mensagem de confirma√ß√£o")
    
    print("\nüìà GR√ÅFICOS B√ÅSICOS:")
    print("   ‚Ä¢ plot_training_history() - Hist√≥rico de treinamento")
    print("   ‚Ä¢ plot_predictions() - Predi√ß√µes vs valores reais")
    print("   ‚Ä¢ plot_metrics_comparison() - Compara√ß√£o de m√©tricas")
    print("   ‚Ä¢ save_metrics_table() - Salvar tabela de m√©tricas")
    
    print("\nüìä AN√ÅLISE DE DISTRIBUI√á√ïES:")
    print("   ‚Ä¢ plot_qq_analysis() - Q-Q Plot")
    print("   ‚Ä¢ plot_cdf_comparison() - Compara√ß√£o FDA")
    print("   ‚Ä¢ plot_pdf_comparison() - Compara√ß√£o FDP")
    print("   ‚Ä¢ plot_distribution_analysis() - An√°lise completa")
    print("   ‚Ä¢ plot_multi_model_cdf_comparison() - FDA m√∫ltiplos modelos")
    print("   ‚Ä¢ plot_multi_model_pdf_comparison() - FDP m√∫ltiplos modelos")
    
    print("\nüî¨ TESTES ESTAT√çSTICOS:")
    print("   ‚Ä¢ plot_ks_test_analysis() - Teste Kolmogorov-Smirnov")
    print("   ‚Ä¢ plot_autocorrelation_analysis() - An√°lise autocorrela√ß√£o")
    
    print("\nüÜö COMPARA√á√ÉO DE MODELOS:")
    print("   ‚Ä¢ plot_models_comparison_overview() - Vis√£o geral comparativa")
    print("   ‚Ä¢ plot_predictions_comparison() - Comparar predi√ß√µes")
    print("   ‚Ä¢ plot_residuals_comparison() - Comparar res√≠duos")
    print("   ‚Ä¢ plot_training_comparison() - Comparar treinamento")
    print("   ‚Ä¢ plot_performance_radar() - Gr√°fico radar")
    
    print("\nüìÑ RELAT√ìRIOS:")
    print("   ‚Ä¢ generate_comprehensive_report() - Relat√≥rio completo")
    print("   ‚Ä¢ generate_text_report() - Relat√≥rio textual")
    print("   ‚Ä¢ generate_html_report() - Relat√≥rio HTML")
    print("   ‚Ä¢ generate_quick_summary() - Resumo r√°pido")
    
    print("\n" + "=" * 60)
    print("üöÄ Para mais informa√ß√µes, use help(fun√ß√£o)")


def quick_start_guide():
    """
    Guia r√°pido de uso do pacote
    """
    guide = """
    üöÄ GUIA R√ÅPIDO - PACOTE DE VISUALIZA√á√ÉO
    ======================================
    
    üìã PREPARA√á√ÉO DOS DADOS:
    -----------------------
    Os dados devem estar no formato de dicion√°rio:
    
    # Para um √∫nico modelo:
    results = {
        'actuals': [valores_reais],
        'predictions': [predi√ß√µes],
        'train_losses': [losses_treino],  # opcional
        'val_losses': [losses_valida√ß√£o]  # opcional
    }
    
    # Para m√∫ltiplos modelos:
    results_dict = {
        'Modelo_1': {
            'actuals': [...],
            'predictions': [...],
            ...
        },
        'Modelo_2': {
            'actuals': [...],
            'predictions': [...],
            ...
        }
    }
    
    ‚ö° USO R√ÅPIDO:
    -------------
    
    # 1. Importar o pacote
    from mackey_glass_prediction.utils import visualization as viz
    
    # 2. Gr√°fico b√°sico de predi√ß√µes
    viz.plot_predictions(actuals, predictions, save_path="predicoes.png")
    
    # 3. An√°lise Q-Q
    viz.plot_qq_analysis(actuals, predictions, save_path="qq_plot.png")
    
    # 4. Compara√ß√£o de modelos
    viz.plot_models_comparison_overview(results_dict, save_path="comparacao.png")
    
    # 5. Relat√≥rio completo
    generated_files = viz.generate_comprehensive_report(
        results_dict, 
        output_dir="relatorio/"
    )
    
    # 6. Resumo r√°pido no console
    print(viz.generate_quick_summary(results_dict))
    
    üéØ DICAS:
    ---------
    ‚Ä¢ Use save_path=None para mostrar gr√°ficos sem salvar
    ‚Ä¢ Todos os gr√°ficos t√™m t√≠tulos e par√¢metros customiz√°veis
    ‚Ä¢ O relat√≥rio abrangente gera todos os tipos de an√°lise
    ‚Ä¢ Use show_available_functions() para ver todas as op√ß√µes
    
    üìö DOCUMENTA√á√ÉO:
    ----------------
    ‚Ä¢ Cada fun√ß√£o tem docstring detalhada
    ‚Ä¢ Use help(viz.fun√ß√£o) para mais informa√ß√µes
    ‚Ä¢ Exemplos dispon√≠veis nos docstrings
    """
    
    print(guide)


# Fun√ß√£o de conveni√™ncia para an√°lise r√°pida
def quick_analysis(results_dict, output_dir="analysis_output", model_name=None):
    """
    An√°lise r√°pida com os gr√°ficos mais importantes
    
    Args:
        results_dict: Dados dos modelos
        output_dir: Diret√≥rio de sa√≠da
        model_name: Nome do modelo (para an√°lise √∫nica)
    
    Returns:
        dict: Arquivos gerados
    """
    ensure_output_dir(output_dir)
    
    print("üöÄ Iniciando an√°lise r√°pida...")
    
    # Se for um √∫nico modelo
    if model_name and isinstance(results_dict, dict) and 'actuals' in results_dict:
        single_model = {model_name: results_dict}
        
        generated = {}
        
        # Gr√°ficos b√°sicos
        if 'actuals' in results_dict and 'predictions' in results_dict:
            pred_path = f"{output_dir}/predictions_{model_name}.png"
            plot_predictions(results_dict['actuals'], results_dict['predictions'], 
                           save_path=pred_path)
            generated['predictions'] = pred_path
            
            qq_path = f"{output_dir}/qq_plot_{model_name}.png"
            plot_qq_analysis(results_dict['actuals'], results_dict['predictions'], 
                           save_path=qq_path)
            generated['qq_plot'] = qq_path
        
        if 'train_losses' in results_dict and 'val_losses' in results_dict:
            train_path = f"{output_dir}/training_{model_name}.png"
            plot_training_history(results_dict['train_losses'], results_dict['val_losses'], 
                                save_path=train_path)
            generated['training'] = train_path
        
        print(f"‚úÖ An√°lise r√°pida conclu√≠da! {len(generated)} arquivos gerados.")
        return generated
    
    else:
        # M√∫ltiplos modelos
        generated = {}
        
        # Vis√£o geral comparativa
        overview_path = f"{output_dir}/models_overview.png"
        plot_models_comparison_overview(results_dict, save_path=overview_path)
        generated['overview'] = overview_path
        
        # Gr√°fico radar
        radar_path = f"{output_dir}/performance_radar.png"
        plot_performance_radar(results_dict, save_path=radar_path)
        generated['radar'] = radar_path
        
        # Compara√ß√£o de predi√ß√µes
        pred_comp_path = f"{output_dir}/predictions_comparison.png"
        plot_predictions_comparison(results_dict, save_path=pred_comp_path)
        generated['predictions_comparison'] = pred_comp_path
        
        print(f"‚úÖ An√°lise r√°pida conclu√≠da! {len(generated)} arquivos gerados.")
        return generated 